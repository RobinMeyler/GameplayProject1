// This is so I can change images easier

// Texture, 1 texture for all sides

for (int i = 0; i < 36; i = i + 6)
	{
		vertex[i].texel[0] = 0.0;
		vertex[i].texel[1] = 0.0;

		vertex[i + 1].texel[0] = 0.0;
		vertex[i + 1].texel[1] = 1.0;

		vertex[i + 2].texel[0] = 1.0;
		vertex[i + 2].texel[1] = 1.0;

		vertex[i + 3].texel[0] = 1.0;
		vertex[i + 3].texel[1] = 1.0;

		vertex[i + 4].texel[0] = 1.0;
		vertex[i + 4].texel[1] = 0.0;

		vertex[i + 5].texel[0] = 0.0;
		vertex[i + 5].texel[1] = 0.0;
	}

// If the texture or tga needs to be mirror reversed
for (int i = 0; i < 36; i = i + 6)
	{
		vertex[i].texel[0] = 0.0;
		vertex[i].texel[1] = 1.0;

		vertex[i + 1].texel[0] = 1.0;
		vertex[i + 1].texel[1] = 1.0;

		vertex[i + 2].texel[0] = 1.0;
		vertex[i + 2].texel[1] = 0.0;

		vertex[i + 3].texel[0] = 1.0;
		vertex[i + 3].texel[1] = 0.0;

		vertex[i + 4].texel[0] = 0.0;
		vertex[i + 4].texel[1] = 0.0;

		vertex[i + 5].texel[0] = 0.0;
		vertex[i + 5].texel[1] = 1.0;
	}

// Minecraft sheet text

float block = 106;
	float blockWidth = 512;
	float startX = 56.0f;
	float startY = 16.0f;

	for (int i = 0; i < 24; i = i + 6)
	{
		vertex[i].texel[0] = startX / blockWidth;
		vertex[i].texel[1] = (startY + (2 * block)) / blockWidth;

		vertex[i + 1].texel[0] = (startX + block) / blockWidth;
		vertex[i + 1].texel[1] = (startY + (2 * block)) / blockWidth;

		vertex[i + 2].texel[0] = (startX + block) / blockWidth;
		vertex[i + 2].texel[1] = (startY + block) / blockWidth;

		vertex[i + 3].texel[0] = (startX + block) / blockWidth;
		vertex[i + 3].texel[1] = (startY + block) / blockWidth;

		vertex[i + 4].texel[0] = (startX) / blockWidth;
		vertex[i + 4].texel[1] = (startY + block) / blockWidth;

		vertex[i + 5].texel[0] = startX / blockWidth;
		vertex[i + 5].texel[1] = (startY + (2 * block)) / blockWidth;
	}

	// bottom
	vertex[24].texel[0] = (startX + (2 * block)) / blockWidth;
	vertex[24].texel[1] = (startY + (3* block)) / blockWidth;

	vertex[25].texel[0] = (startX + (3 * block)) / blockWidth;
	vertex[25].texel[1] = (startY + (3 * block)) / blockWidth;

	vertex[26].texel[0] = (startX + (3 * block)) / blockWidth;
	vertex[26].texel[1] = (startY + (2 * block)) / blockWidth;

	vertex[27].texel[0] = (startX + (3 * block)) / blockWidth;
	vertex[27].texel[1] = (startY + (2 * block)) / blockWidth;

	vertex[28].texel[0] = (startX + (2 * block)) / blockWidth;
	vertex[28].texel[1] = (startY + (2 * block)) / blockWidth;

	vertex[29].texel[0] = (startX + (2 * block)) / blockWidth;
	vertex[29].texel[1] = (startY + (3 * block)) / blockWidth;


	// Top
	vertex[30].texel[0] = startX / blockWidth;
	vertex[30].texel[1] = (startY + block) / blockWidth;

	vertex[31].texel[0] = (startX + block )/ blockWidth;
	vertex[31].texel[1] = (startY + block) / blockWidth;

	vertex[32].texel[0] = (startX + block) / blockWidth;
	vertex[32].texel[1] = (startY) / blockWidth;

	vertex[33].texel[0] = (startX + block) / blockWidth;
	vertex[33].texel[1] = (startY) / blockWidth;

	vertex[34].texel[0] = startX / blockWidth;
	vertex[34].texel[1] = (startY) / blockWidth;

	vertex[35].texel[0] = startX / blockWidth;
	vertex[35].texel[1] = (startY + block) / blockWidth;
